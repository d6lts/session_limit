<?php
// $Id$

/**
 *  Established Sessions do NOT need to verify every page load.
 *  new Session must deal w/ determining which connection is cut.
 */

/**
 * Implementation of hook_settings().
 */
function session_limit_settings() {

  for ($n = 1; $n <= 5; $n++) {
    $range[$n] = $n;
  }

  $form['session_limit_max'] = array(
    '#type' => 'select',
    '#title' => t('Select the maximum # of active sessions a user can have'),
    '#default_value' => variable_get('session_limit_max',1),
    '#options' => $range,
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));

  return $form;
}

function session_limit_settings_submit($form_id, $form_values) {
  variable_set('session_limit_max',$form_values['session_limit_max']);
  drupal_set_message(t('settings saved.'));
}

/**
 * Implementation of hook_help().
 */
function session_limit_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('implements Session limits.');
  }
}


/* implementation of hook_menu().
 * Redirect user if over session_limit.
 */
function session_limit_menu($may_cache) {
  global $user;

  if (!$may_cache) {
   
    // Determine whether session has been verified. 
    if (($user->uid > 1) && !isset($_SESSION['session_limit'])) {

      // Exclude from the redirect.
      switch ($_GET['q']) {
        case 'session/limit':
        case 'logout':
          return;
      }

      $result = db_query(
        'SELECT count(*) from {sessions} where uid = %d',
        $user->uid);

      if (db_result($result) > variable_get('session_limit_max', 1)) {
        // redirect to session handler.
        drupal_goto('session/limit');
      } 
      else {
        // mark session as verified to bypass this in future.
        $_SESSION['session_limit'] = TRUE;
      }
    } 
  } 
  else {
    $items[] = array(
      'path' => 'session/limit', 
      'title' => t('Session Limit Exceeded'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('session_limit_page'),
      'access' => TRUE,
      'type' => MENU_CALLBACK,
    );
    if ($user->uid) {
      $items[] = array(
        'path' => 'mysessions', 
        'title' => t('My sessions'),
        'callback' => 'drupal_get_form',
        'callback arguments' => array('session_limit_page'),
        'access' => TRUE,
      );
    }
    $items[] = array(
      'path' => 'admin/settings/session_limit', 
      'title' => t('Session Limit'),
      'description' => t('Configure Sessions Limits.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('session_limit_settings'),
    );
  }
  return $items;
}


/**
 * Display/Delete sessions..
 */
function session_limit_page() {
  global $user;

  if (!$user->uid > 0) {
    drupal_goto();
  }

  $result = db_query('SELECT * from {sessions} where uid = %d',$user->uid);
  while ($obj =  db_fetch_object($result)) {
    if ($user->sid == $obj->sid) {
      $message = t('Your Current Session.');
    } 
    else {
      unset($message);
    }

    $sids[$obj->sid] = t('<b>Host:</b> %host (idle: %time) <b>@message</b>', 
      array(
        '%host' => $obj->hostname, 
        '@message' => $message,
        '%time' => format_interval(time() - $obj->timestamp))
    ); 
  }
  $form['sid'] = array(
    '#type' => 'radios',
    '#title' => t('Select a Session to disconnect.'),
    '#options' => $sids,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Disconnect'),
  );
  return $form;
}

function session_limit_page_submit($form_id, $form_values) {
  global $user;

  if ($user->sid == $form_values['sid']) {
    // force a normal logout for ourself.
    drupal_set_message('Your session has been disconnected.');
    drupal_goto('logout');
  } else {    
    // remove selected session from database.
    db_query("DELETE from {sessions} where sid = '%s'",$form_values['sid']);

    drupal_set_message('Session has been disconnected.');
    // redirect to main page.
    drupal_goto();
  }
}
